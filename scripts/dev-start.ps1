# Sky Park - Start Development Environment
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

param(
    [switch]$Frontend,
    [switch]$Backend,
    [switch]$Services,
    [switch]$All
)

# –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–ª–∞–≥–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
if (-not ($Frontend -or $Backend -or $Services)) {
    $All = $true
}

Write-Host "üöÄ Sky Park - –ó–∞–ø—É—Å–∫ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" -ForegroundColor Cyan
Write-Host "=" * 50

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ PowerShell
function Start-ServiceInNewWindow {
    param(
        [string]$Title,
        [string]$Command,
        [string]$WorkingDirectory = $PWD
    )
    
    $encodedCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($Command))
    
    Start-Process powershell -ArgumentList @(
        "-NoExit",
        "-EncodedCommand", $encodedCommand
    ) -WindowStyle Normal
    
    Write-Host "‚úÖ $Title –∑–∞–ø—É—â–µ–Ω –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ" -ForegroundColor Green
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Yellow

if (-not (Test-Path "node_modules")) {
    Write-Host "‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ .\scripts\dev-setup.ps1" -ForegroundColor Red
    exit 1
}

# –ó–∞–ø—É—Å–∫ Docker services
if ($Services -or $All) {
    Write-Host "üê≥ –ó–∞–ø—É—Å–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Yellow
    
    if (Test-Path "docker-compose.yml") {
        try {
            docker-compose up -d postgres redis
            Write-Host "‚úÖ PostgreSQL –∏ Redis –∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor Green
            Start-Sleep -Seconds 3
        } catch {
            Write-Host "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker services" -ForegroundColor Yellow
            Write-Host "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Gray
        }
    }
}

# –ó–∞–ø—É—Å–∫ Backend API
if ($Backend -or $All) {
    Write-Host "üèóÔ∏è –ó–∞–ø—É—Å–∫ Backend API..." -ForegroundColor Yellow
    
    $backendCommand = @"
Write-Host 'üèóÔ∏è Sky Park API Server' -ForegroundColor Cyan
Write-Host '–ü–µ—Ä–µ—Ö–æ–¥ –≤ apps/api...'
Set-Location 'apps/api'
Write-Host '–ó–∞–ø—É—Å–∫ Go —Å–µ—Ä–≤–µ—Ä–∞...'
go run cmd/api/main.go
"@
    
    Start-ServiceInNewWindow -Title "Sky Park API" -Command $backendCommand
    Start-Sleep -Seconds 2
}

# –ó–∞–ø—É—Å–∫ Frontend
if ($Frontend -or $All) {
    Write-Host "üé® –ó–∞–ø—É—Å–∫ Frontend..." -ForegroundColor Yellow
    
    $frontendCommand = @"
Write-Host 'üé® Sky Park Web App' -ForegroundColor Cyan
Write-Host '–ü–µ—Ä–µ—Ö–æ–¥ –≤ apps/web...'
Set-Location 'apps/web'
Write-Host '–ó–∞–ø—É—Å–∫ Next.js dev server...'
npm run dev
"@
    
    Start-ServiceInNewWindow -Title "Sky Park Web" -Command $frontendCommand
    Start-Sleep -Seconds 2
}

Write-Host ""
Write-Host "üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!" -ForegroundColor Green
Write-Host ""
Write-Host "–î–æ—Å—Ç—É–ø–Ω—ã–µ URL:" -ForegroundColor Cyan
Write-Host "  üåê Frontend:    http://localhost:3000" -ForegroundColor White
Write-Host "  üèóÔ∏è Backend API: http://localhost:8080" -ForegroundColor White
Write-Host "  üìä Health:      http://localhost:8080/health" -ForegroundColor White
Write-Host ""
Write-Host "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö PowerShell" -ForegroundColor Yellow
Write-Host ""
Write-Host "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:" -ForegroundColor Cyan
Write-Host "  .\scripts\dev-stop.ps1" -ForegroundColor White
Write-Host ""
Write-Host "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤ –æ–∫–Ω–∞—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:" -ForegroundColor Cyan
Write-Host "  Ctrl+C  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å" -ForegroundColor White
Write-Host "  Ctrl+R  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å (–≥–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)" -ForegroundColor White
Write-Host ""

# –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8080/health" -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è)" -ForegroundColor Yellow
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000" -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Frontend –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "–ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É! üöÄ" -ForegroundColor Green 
 