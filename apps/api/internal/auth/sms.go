package auth

import (
	"crypto/rand"
	"fmt"
	"math/big"
	"regexp"
	"time"
)

type SMSCode struct {
	Phone     string    `json:"phone"`
	Code      string    `json:"code"`
	ExpiresAt time.Time `json:"expires_at"`
	Attempts  int       `json:"attempts"`
	CreatedAt time.Time `json:"created_at"`
}

type SMSService struct {
	codes    map[string]*SMSCode // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
	codeTTL  time.Duration
	codeLen  int
	maxAttempts int
}

func NewSMSService() *SMSService {
	return &SMSService{
		codes:       make(map[string]*SMSCode),
		codeTTL:     5 * time.Minute, // –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç
		codeLen:     6,               // 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
		maxAttempts: 3,               // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
	}
}

// ValidateKyrgyzstanPhone –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
func (s *SMSService) ValidateKyrgyzstanPhone(phone string) bool {
	// –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω: +996XXXXXXXXX (9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +996)
	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: Beeline (+996770-779, +996220-229), 
	// MegaCom (+996550-559), O! (+996500-509), NurTelecom (+996990-999)
	patterns := []string{
		`^\+996[57][0-9]{8}$`,  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
		`^\+9962[0-9]{8}$`,     // –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –≤ –ë–∏—à–∫–µ–∫–µ
		`^\+996[0-9]{9}$`,      // –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤
	}

	for _, pattern := range patterns {
		matched, _ := regexp.MatchString(pattern, phone)
		if matched {
			return true
		}
	}
	return false
}

// GenerateCode —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
func (s *SMSService) GenerateCode() string {
	code := ""
	for i := 0; i < s.codeLen; i++ {
		num, _ := rand.Int(rand.Reader, big.NewInt(10))
		code += num.String()
	}
	return code
}

// SendVerificationCode –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
func (s *SMSService) SendVerificationCode(phone string) (*SMSCode, error) {
	if !s.ValidateKyrgyzstanPhone(phone) {
		return nil, fmt.Errorf("invalid phone number format for Kyrgyzstan")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
	if existingCode, exists := s.codes[phone]; exists {
		// –ï—Å–ª–∏ –∫–æ–¥ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
		if time.Now().Before(existingCode.ExpiresAt) && existingCode.Attempts < s.maxAttempts {
			return existingCode, nil
		}
		// –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥
		delete(s.codes, phone)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
	code := s.GenerateCode()
	smsCode := &SMSCode{
		Phone:     phone,
		Code:      code,
		ExpiresAt: time.Now().Add(s.codeTTL),
		Attempts:  0,
		CreatedAt: time.Now(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
	s.codes[phone] = smsCode

	// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
	// –ù–∞–ø—Ä–∏–º–µ—Ä: Beeline KG, MegaCom, O! –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
	fmt.Printf("üì± SMS to %s: Your Sky Park verification code is: %s\n", phone, code)
	fmt.Printf("üïí Code expires at: %s\n", smsCode.ExpiresAt.Format("15:04:05"))

	return smsCode, nil
}

// VerifyCode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
func (s *SMSService) VerifyCode(phone, inputCode string) (bool, error) {
	smsCode, exists := s.codes[phone]
	if !exists {
		return false, fmt.Errorf("no verification code found for this phone number")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞
	if time.Now().After(smsCode.ExpiresAt) {
		delete(s.codes, phone)
		return false, fmt.Errorf("verification code has expired")
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
	smsCode.Attempts++

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
	if smsCode.Attempts > s.maxAttempts {
		delete(s.codes, phone)
		return false, fmt.Errorf("maximum verification attempts exceeded")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
	if smsCode.Code != inputCode {
		return false, fmt.Errorf("invalid verification code")
	}

	// –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
	delete(s.codes, phone)
	return true, nil
}

// CleanupExpiredCodes –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
func (s *SMSService) CleanupExpiredCodes() {
	now := time.Now()
	for phone, code := range s.codes {
		if now.After(code.ExpiresAt) {
			delete(s.codes, phone)
		}
	}
}

// GetRemainingAttempts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
func (s *SMSService) GetRemainingAttempts(phone string) int {
	if code, exists := s.codes[phone]; exists {
		return s.maxAttempts - code.Attempts
	}
	return s.maxAttempts
} 
 