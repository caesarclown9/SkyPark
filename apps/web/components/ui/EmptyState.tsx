'use client';

import React from 'react';
import { LucideIcon } from 'lucide-react';
import { Button } from './Button';
import { Card } from './Card';
import { BaseComponentProps } from '@/lib/types';

interface EmptyStateProps extends BaseComponentProps {
  icon?: LucideIcon;
  emoji?: string;
  title: string;
  description?: string;
  action?: {
    label: string;
    onClick: () => void;
    variant?: 'default' | 'outline' | 'secondary';
  };
  compact?: boolean;
}

export const EmptyState: React.FC<EmptyStateProps> = ({
  icon: Icon,
  emoji,
  title,
  description,
  action,
  compact = false,
  className = '',
}) => {
  const content = (
    <div className={`text-center ${compact ? 'space-y-3' : 'space-y-4'} ${className}`}>
      {/* –ò–∫–æ–Ω–∫–∞ –∏–ª–∏ —ç–º–æ–¥–∑–∏ */}
      <div className={`${compact ? 'w-12 h-12' : 'w-16 h-16'} mx-auto flex items-center justify-center`}>
        {emoji ? (
          <span className={`${compact ? 'text-4xl' : 'text-6xl'}`}>{emoji}</span>
        ) : Icon ? (
          <Icon className={`${compact ? 'w-12 h-12' : 'w-16 h-16'} text-gray-400`} />
        ) : (
          <div className={`${compact ? 'w-12 h-12' : 'w-16 h-16'} bg-gray-100 rounded-full`} />
        )}
      </div>

      {/* –¢–µ–∫—Å—Ç */}
      <div className="space-y-2">
        <h3 className={`${compact ? 'text-base' : 'text-lg'} font-semibold text-gray-900`}>
          {title}
        </h3>
        {description && (
          <p className={`${compact ? 'text-sm' : 'text-base'} text-gray-600 max-w-sm mx-auto`}>
            {description}
          </p>
        )}
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏–µ */}
      {action && (
        <div className={compact ? 'pt-2' : 'pt-4'}>
          <Button
            variant={action.variant || 'default'}
            onClick={action.onClick}
            size={compact ? 'sm' : 'default'}
          >
            {action.label}
          </Button>
        </div>
      )}
    </div>
  );

  if (compact) {
    return content;
  }

  return (
    <Card className="p-8">
      {content}
    </Card>
  );
};

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ empty states –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
export const EmptyStates = {
  NoTickets: (props: Partial<EmptyStateProps>) => (
    <EmptyState
      emoji="üé´"
      title="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤"
      description="–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã"
      {...props}
    />
  ),

  NoBookings: (props: Partial<EmptyStateProps>) => (
    <EmptyState
      emoji="üìÖ"
      title="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
      description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤–µ—Å–µ–ª—å—è"
      {...props}
    />
  ),

  NoNotifications: (props: Partial<EmptyStateProps>) => (
    <EmptyState
      emoji="üîî"
      title="–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
      description="–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"
      {...props}
    />
  ),

  NoParks: (props: Partial<EmptyStateProps>) => (
    <EmptyState
      emoji="üé†"
      title="–ü–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
      description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"
      {...props}
    />
  ),

  NoSearchResults: (props: Partial<EmptyStateProps>) => (
    <EmptyState
      emoji="üîç"
      title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
      description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã"
      {...props}
    />
  ),

  Error: (props: Partial<EmptyStateProps>) => (
    <EmptyState
      emoji="‚ö†Ô∏è"
      title="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
      description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
      {...props}
    />
  ),
}; 