import { API_BASE_URL } from '@/lib/utils';

export type NotificationType = 
  | 'booking_confirmed' 
  | 'booking_reminder' 
  | 'payment_success' 
  | 'ticket_generated'
  | 'loyalty_bonus'
  | 'marketing_offer'
  | 'system_message';

export interface PushNotification {
  id: string;
  user_id: string;
  title: string;
  body: string;
  type: NotificationType;
  data?: Record<string, any>;
  icon?: string;
  scheduled_at?: string;
  sent_at?: string;
  read_at?: string;
  is_read: boolean;
  created_at: string;
}

export interface NotificationSettings {
  enabled: boolean;
  booking_notifications: boolean;
  payment_notifications: boolean;
  marketing_notifications: boolean;
  reminder_notifications: boolean;
  loyalty_notifications: boolean;
  email_notifications: boolean;
  sms_notifications: boolean;
  push_notifications: boolean;
}

export interface NotificationStats {
  total_sent: number;
  total_delivered: number;
  total_opened: number;
  total_clicked: number;
  delivery_rate: number;
  open_rate: number;
  click_rate: number;
  recent_notifications: PushNotification[];
}

class NotificationService {
  private vapidPublicKey = 'BEl62iUYgUivxIkv69yViEuiBIa40HI80NqILzMWwfh'; // –ú–æ–∫ –∫–ª—é—á

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  isSupported(): boolean {
    return 'serviceWorker' in navigator && 'PushManager' in window;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
  async registerServiceWorker(): Promise<ServiceWorkerRegistration | null> {
    if (!this.isSupported()) {
      console.warn('Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
      return null;
    }

    try {
      const registration = await navigator.serviceWorker.register('/sw.js');
      console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
      return registration;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      return null;
    }
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermission(): Promise<NotificationPermission> {
    if (!this.isSupported()) {
      return 'denied';
    }

    try {
      const permission = await Notification.requestPermission();
      console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', permission);
      return permission;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
      return 'denied';
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async subscribeToPush(): Promise<PushSubscription | null> {
    const registration = await this.registerServiceWorker();
    if (!registration) return null;

    const permission = await this.requestPermission();
    if (permission !== 'granted') return null;

    try {
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: this.urlBase64ToUint8Array(this.vapidPublicKey)
      });

      console.log('Push –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', subscription);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await this.sendSubscriptionToServer(subscription);
      
      return subscription;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è push –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  private async sendSubscriptionToServer(subscription: PushSubscription): Promise<void> {
    // –ú–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    await new Promise(resolve => setTimeout(resolve, 500));
    console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', subscription);
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
    // await fetch(`${API_BASE_URL}/api/notifications/subscribe`, {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify({ subscription })
    // });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async showLocalNotification(title: string, options: NotificationOptions = {}): Promise<void> {
    if (!this.isSupported() || Notification.permission !== 'granted') {
      console.warn('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      return;
    }

    const defaultOptions: NotificationOptions = {
      icon: '/icons/icon-192x192.png',
      badge: '/icons/badge-72x72.png',
      vibrate: [100, 50, 100],
      ...options
    };

    new Notification(title, defaultOptions);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserNotifications(): Promise<PushNotification[]> {
    await new Promise(resolve => setTimeout(resolve, 800));
    
    // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
    return [
      {
        id: 'notif-1',
        user_id: 'user-1',
        title: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! üéâ',
        body: '–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Fantasy World –Ω–∞ 15 —Ñ–µ–≤—Ä–∞–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
        type: 'booking_confirmed',
        data: { booking_id: 'booking-1', park_name: 'Fantasy World' },
        icon: '/icons/booking.png',
        is_read: false,
        created_at: '2025-01-30T10:30:00Z',
      },
      {
        id: 'notif-2',
        user_id: 'user-1',
        title: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üí≥',
        body: '–û–ø–ª–∞—Ç–∞ 750 —Å–æ–º —á–µ—Ä–µ–∑ mBank –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ë–∏–ª–µ—Ç—ã –≥–æ—Ç–æ–≤—ã!',
        type: 'payment_success',
        data: { payment_id: 'payment-1', amount: 750 },
        icon: '/icons/payment.png',
        is_read: true,
        read_at: '2025-01-30T11:00:00Z',
        created_at: '2025-01-30T10:45:00Z',
      },
      {
        id: 'notif-3',
        user_id: 'user-1',
        title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ üìÖ',
        body: '–ó–∞–≤—Ç—Ä–∞ –≤–∞—à –≤–∏–∑–∏—Ç –≤ Happy Land –≤ 14:00. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –±–∏–ª–µ—Ç—ã!',
        type: 'booking_reminder',
        data: { booking_id: 'booking-2', visit_time: '14:00' },
        icon: '/icons/reminder.png',
        is_read: false,
        created_at: '2025-01-29T18:00:00Z',
      },
      {
        id: 'notif-4',
        user_id: 'user-1',
        title: '–ù–æ–≤—ã–µ –±–æ–Ω—É—Å—ã! üéÅ',
        body: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç',
        type: 'loyalty_bonus',
        data: { points: 50, total_points: 1250 },
        icon: '/icons/loyalty.png',
        is_read: false,
        created_at: '2025-01-29T16:30:00Z',
      },
      {
        id: 'notif-5',
        user_id: 'user-1',
        title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! üî•',
        body: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ. –ê–∫—Ü–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞!',
        type: 'marketing_offer',
        data: { discount: 20, valid_until: '2025-01-31' },
        icon: '/icons/offer.png',
        is_read: true,
        read_at: '2025-01-29T12:00:00Z',
        created_at: '2025-01-29T10:00:00Z',
      },
    ];
  }

  // –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  async markAsRead(notificationId: string): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 300));
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:', notificationId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async getNotificationSettings(): Promise<NotificationSettings> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return {
      enabled: true,
      booking_notifications: true,
      payment_notifications: true,
      marketing_notifications: true,
      reminder_notifications: true,
      loyalty_notifications: true,
      email_notifications: true,
      sms_notifications: false,
      push_notifications: true,
    };
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async updateNotificationSettings(settings: Partial<NotificationSettings>): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 800));
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', settings);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async sendPushNotification(
    userIds: string[],
    title: string,
    body: string,
    type: NotificationType,
    data?: Record<string, any>
  ): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 1200));
    console.log('Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', { userIds, title, body, type, data });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendBulkNotification(
    segment: 'all' | 'active' | 'loyal' | 'new',
    title: string,
    body: string,
    type: NotificationType
  ): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log('–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', { segment, title, body, type });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async getNotificationStats(): Promise<NotificationStats> {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      total_sent: 12456,
      total_delivered: 11890,
      total_opened: 8934,
      total_clicked: 3456,
      delivery_rate: 95.5,
      open_rate: 75.1,
      click_rate: 38.7,
      recent_notifications: await this.getUserNotifications()
    };
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async scheduleNotification(
    userId: string,
    title: string,
    body: string,
    type: NotificationType,
    scheduledAt: Date,
    data?: Record<string, any>
  ): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 600));
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:', {
      userId, title, body, type, scheduledAt, data
    });
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  async setupBookingNotifications(bookingId: string): Promise<void> {
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    await this.scheduleNotification(
      'user-1',
      '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! üéâ',
      '–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      'booking_confirmed',
      new Date(),
      { booking_id: bookingId }
    );

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
    const reminderDate = new Date();
    reminderDate.setDate(reminderDate.getDate() + 1);
    
    await this.scheduleNotification(
      'user-1',
      '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ üìÖ',
      '–ó–∞–≤—Ç—Ä–∞ –≤–∞—à –≤–∏–∑–∏—Ç –≤ –ø–∞—Ä–∫. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –±–∏–ª–µ—Ç—ã!',
      'booking_reminder',
      reminderDate,
      { booking_id: bookingId }
    );
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  async setupLoyaltyNotifications(userId: string, points: number): Promise<void> {
    if (points >= 100) {
      await this.scheduleNotification(
        userId,
        '–ù–æ–≤—ã–µ –±–æ–Ω—É—Å—ã! üéÅ',
        `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!`,
        'loyalty_bonus',
        new Date(),
        { points, total_points: points + 1000 }
      );
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è VAPID –∫–ª—é—á–∞
  private urlBase64ToUint8Array(base64String: string): Uint8Array {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  getNotificationIcon(type: NotificationType): string {
    const icons = {
      booking_confirmed: 'üéâ',
      booking_reminder: 'üìÖ',
      payment_success: 'üí≥',
      ticket_generated: 'üé´',
      loyalty_bonus: 'üéÅ',
      marketing_offer: 'üî•',
      system_message: 'üì¢',
    };
    
    return icons[type] || 'üì±';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  formatNotificationTime(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);

    if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU');
  }
}

export const notificationService = new NotificationService(); 