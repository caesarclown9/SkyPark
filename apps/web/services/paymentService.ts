import { API_BASE_URL } from '@/lib/utils';

const DEMO_MODE = process.env.NEXT_PUBLIC_DEMO_MODE === 'true';

export type PaymentProvider = 'mbank' | 'odengi' | 'elcart' | 'optimabank' | 'cash';
export type PaymentStatus = 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled' | 'refunded';

export interface PaymentMethod {
  id: string;
  provider: PaymentProvider;
  name: string;
  icon: string;
  description: string;
  fee_percentage: number;
  min_amount: number;
  max_amount: number;
  is_available: boolean;
  supports_refund: boolean;
  processing_time: string;
}

export interface PaymentCard {
  last4: string;
  brand: string;
  expiry_month: number;
  expiry_year: number;
  holder_name?: string;
}

export interface PaymentRequest {
  booking_id: string;
  amount: number;
  currency: string;
  provider: PaymentProvider;
  payment_method_id?: string;
  card_data?: {
    number: string;
    expiry_month: number;
    expiry_year: number;
    cvv: string;
    holder_name: string;
  };
  phone_number?: string;
  return_url?: string;
  cancel_url?: string;
}

export interface Payment {
  id: string;
  booking_id: string;
  user_id: string;
  provider: PaymentProvider;
  status: PaymentStatus;
  amount: number;
  original_amount: number;
  fee_amount: number;
  net_amount: number;
  currency: string;
  exchange_rate?: number;
  original_currency?: string;
  provider_transaction_id?: string;
  provider_reference?: string;
  card?: PaymentCard;
  phone_number?: string;
  description?: string;
  failure_reason?: string;
  initiated_at?: string;
  authorized_at?: string;
  captured_at?: string;
  failed_at?: string;
  expired_at?: string;
  created_at: string;
  updated_at: string;
}

export interface PaymentStats {
  total_payments: number;
  completed_payments: number;
  failed_payments: number;
  total_revenue: number;
  average_payment: number;
  payments_by_provider: Record<PaymentProvider, number>;
  daily_revenue: Array<{
    date: string;
    revenue: number;
    count: number;
  }>;
}

class PaymentService {
  private async fetchWithAuth(url: string, options: RequestInit = {}): Promise<Response> {
    const token = localStorage.getItem('access_token');
    
    return fetch(`${API_BASE_URL}${url}`, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
        ...options.headers,
      },
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
  async getPaymentMethods(): Promise<PaymentMethod[]> {
    // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∏—Ä–≥–∏–∑—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    return [
      {
        id: 'mbank_card',
        provider: 'mbank',
        name: 'mBank',
        icon: 'üè¶',
        description: '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ mBank',
        fee_percentage: 2.5,
        min_amount: 50,
        max_amount: 100000,
        is_available: true,
        supports_refund: true,
        processing_time: '–º–≥–Ω–æ–≤–µ–Ω–Ω–æ',
      },
      {
        id: 'odengi_wallet',
        provider: 'odengi',
        name: 'O!–î–µ–Ω—å–≥–∏',
        icon: 'üì±',
        description: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ O!–î–µ–Ω—å–≥–∏',
        fee_percentage: 1.5,
        min_amount: 10,
        max_amount: 50000,
        is_available: true,
        supports_refund: true,
        processing_time: '–º–≥–Ω–æ–≤–µ–Ω–Ω–æ',
      },
      {
        id: 'elcart_card',
        provider: 'elcart',
        name: '–≠–ª–ö–∞—Ä—Ç',
        icon: 'üí≥',
        description: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –≠–ª–ö–∞—Ä—Ç',
        fee_percentage: 2.0,
        min_amount: 100,
        max_amount: 200000,
        is_available: true,
        supports_refund: true,
        processing_time: '–¥–æ 1 –º–∏–Ω—É—Ç—ã',
      },
      {
        id: 'optimabank_card',
        provider: 'optimabank',
        name: 'Optima Bank',
        icon: 'üî∑',
        description: '–ö–∞—Ä—Ç—ã Optima Bank',
        fee_percentage: 2.2,
        min_amount: 50,
        max_amount: 150000,
        is_available: true,
        supports_refund: true,
        processing_time: '–¥–æ 2 –º–∏–Ω—É—Ç',
      },
      {
        id: 'cash_payment',
        provider: 'cash',
        name: '–ù–∞–ª–∏—á–Ω—ã–µ',
        icon: 'üíµ',
        description: '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ',
        fee_percentage: 0,
        min_amount: 1,
        max_amount: 999999,
        is_available: true,
        supports_refund: false,
        processing_time: '–ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏',
      },
    ];
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  async createPayment(paymentData: PaymentRequest): Promise<Payment> {
    // –ú–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    await new Promise(resolve => setTimeout(resolve, 1500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞

    const mockPayment: Payment = {
      id: this.generateId(),
      booking_id: paymentData.booking_id,
      user_id: 'current-user-id',
      provider: paymentData.provider,
      status: 'processing',
      amount: paymentData.amount,
      original_amount: paymentData.amount,
      fee_amount: Math.round(paymentData.amount * 0.025), // 2.5% –∫–æ–º–∏—Å—Å–∏—è
      net_amount: paymentData.amount - Math.round(paymentData.amount * 0.025),
      currency: paymentData.currency,
      provider_transaction_id: this.generateTransactionId(),
      initiated_at: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
    setTimeout(() => {
      this.simulatePaymentProcessing(mockPayment.id);
    }, 2000);

    return mockPayment;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  async getPaymentStatus(paymentId: string): Promise<Payment> {
    // –ú–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    await new Promise(resolve => setTimeout(resolve, 500));

    const status = Math.random() > 0.1 ? 'completed' : 'failed';
    
    return {
      id: paymentId,
      booking_id: 'booking-id',
      user_id: 'user-id',
      provider: 'mbank',
      status: status,
      amount: 300,
      original_amount: 300,
      fee_amount: 7.5,
      net_amount: 292.5,
      currency: 'KGS',
      provider_transaction_id: this.generateTransactionId(),
      captured_at: status === 'completed' ? new Date().toISOString() : undefined,
      failed_at: status === 'failed' ? new Date().toISOString() : undefined,
      failure_reason: status === 'failed' ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ' : undefined,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserPayments(): Promise<Payment[]> {
    if (DEMO_MODE) {
      // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
      await new Promise(resolve => setTimeout(resolve, 800));

      return [
      {
        id: '1',
        booking_id: 'booking-1',
        user_id: 'user-1',
        provider: 'mbank',
        status: 'completed',
        amount: 450,
        original_amount: 450,
        fee_amount: 11.25,
        net_amount: 438.75,
        currency: 'KGS',
        provider_transaction_id: 'TXN_' + Date.now(),
        captured_at: new Date(Date.now() - 86400000).toISOString(),
        created_at: new Date(Date.now() - 86400000).toISOString(),
        updated_at: new Date(Date.now() - 86400000).toISOString(),
      },
      {
        id: '2',
        booking_id: 'booking-2',
        user_id: 'user-1',
        provider: 'odengi',
        status: 'failed',
        amount: 300,
        original_amount: 300,
        fee_amount: 4.5,
        net_amount: 295.5,
        currency: 'KGS',
        failure_reason: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
        failed_at: new Date(Date.now() - 172800000).toISOString(),
        created_at: new Date(Date.now() - 172800000).toISOString(),
        updated_at: new Date(Date.now() - 172800000).toISOString(),
      },
    ];
    }

    // –í production —Ä–µ–∂–∏–º–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const response = await this.fetchWithAuth('/payments/history');
    if (!response.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π');
    }
    const data = await response.json();
    return data.data;
  }

  // –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
  async refundPayment(paymentId: string, amount?: number): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 1000));
    // –ú–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  validateCardNumber(cardNumber: string): boolean {
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞
    const digits = cardNumber.replace(/\D/g, '');
    
    if (digits.length < 13 || digits.length > 19) {
      return false;
    }

    let sum = 0;
    let isEven = false;

    for (let i = digits.length - 1; i >= 0; i--) {
      let digit = parseInt(digits[i]);

      if (isEven) {
        digit *= 2;
        if (digit > 9) {
          digit -= 9;
        }
      }

      sum += digit;
      isEven = !isEven;
    }

    return sum % 10 === 0;
  }

  validateExpiryDate(month: number, year: number): boolean {
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1;

    if (year < currentYear) return false;
    if (year === currentYear && month < currentMonth) return false;

    return month >= 1 && month <= 12;
  }

  validateCVV(cvv: string): boolean {
    return /^\d{3,4}$/.test(cvv);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  formatCardNumber(cardNumber: string): string {
    const cleaned = cardNumber.replace(/\D/g, '');
    const chunks = cleaned.match(/.{1,4}/g) || [];
    return chunks.join(' ').trim();
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
  getCardBrand(cardNumber: string): string {
    const cleaned = cardNumber.replace(/\D/g, '');
    
    if (/^4/.test(cleaned)) return 'Visa';
    if (/^5[1-5]|^2[2-7]/.test(cleaned)) return 'Mastercard';
    if (/^3[47]/.test(cleaned)) return 'American Express';
    if (/^6/.test(cleaned)) return 'Discover';
    
    return 'Unknown';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  formatPaymentStatus(status: PaymentStatus): string {
    const statusMap: Record<PaymentStatus, string> = {
      pending: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
      processing: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
      completed: '–ó–∞–≤–µ—Ä—à–µ–Ω',
      failed: '–û—à–∏–±–∫–∞',
      cancelled: '–û—Ç–º–µ–Ω–µ–Ω',
      refunded: '–í–æ–∑–≤—Ä–∞—â–µ–Ω',
    };
    return statusMap[status] || status;
  }

  // –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  getStatusColor(status: PaymentStatus): string {
    const colorMap: Record<PaymentStatus, string> = {
      pending: 'text-yellow-600 bg-yellow-50 border-yellow-200',
      processing: 'text-blue-600 bg-blue-50 border-blue-200',
      completed: 'text-green-600 bg-green-50 border-green-200',
      failed: 'text-red-600 bg-red-50 border-red-200',
      cancelled: 'text-gray-600 bg-gray-50 border-gray-200',
      refunded: 'text-purple-600 bg-purple-50 border-purple-200',
    };
    return colorMap[status] || 'text-gray-600 bg-gray-50 border-gray-200';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
  formatAmount(amount: number, currency: string = 'KGS'): string {
    const formatted = new Intl.NumberFormat('ru-RU').format(amount);
    const currencySymbol = currency === 'KGS' ? '—Å–æ–º' : currency;
    return `${formatted} ${currencySymbol}`;
  }

  // –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
  calculateFee(amount: number, provider: PaymentProvider): number {
    const feeRates: Record<PaymentProvider, number> = {
      mbank: 0.025,      // 2.5%
      odengi: 0.015,     // 1.5%
      elcart: 0.02,      // 2.0%
      optimabank: 0.022, // 2.2%
      cash: 0,           // 0%
    };
    
    return Math.round(amount * (feeRates[provider] || 0.025));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID (–º–æ–∫)
  private generateId(): string {
    return 'pay_' + Math.random().toString(36).substr(2, 9);
  }

  private generateTransactionId(): string {
    return 'TXN_' + Date.now() + '_' + Math.random().toString(36).substr(2, 5).toUpperCase();
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
  private simulatePaymentProcessing(paymentId: string): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç WebSocket –∏–ª–∏ polling
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async getPaymentStats(): Promise<PaymentStats> {
    await new Promise(resolve => setTimeout(resolve, 600));
    
    return {
      total_payments: 156,
      completed_payments: 142,
      failed_payments: 14,
      total_revenue: 47850,
      average_payment: 337,
      payments_by_provider: {
        mbank: 67,
        odengi: 45,
        elcart: 28,
        optimabank: 12,
        cash: 4,
      },
      daily_revenue: [
        { date: '2025-01-30', revenue: 2100, count: 7 },
        { date: '2025-01-29', revenue: 1850, count: 6 },
        { date: '2025-01-28', revenue: 2450, count: 8 },
      ],
    };
  }
}

export const paymentService = new PaymentService(); 
 