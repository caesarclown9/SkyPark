version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15.5-alpine
    container_name: skypark_postgres
    environment:
      POSTGRES_DB: skypark_db
      POSTGRES_USER: skypark_user
      POSTGRES_PASSWORD: skypark_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      TZ: "Asia/Bishkek"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api/migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skypark_user -d skypark_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skypark_network
    command: |
      postgres 
      -c timezone=Asia/Bishkek 
      -c log_statement=all 
      -c log_destination=stderr 
      -c max_connections=200

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: skypark_redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skypark_network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: skypark_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: skypark_user
      RABBITMQ_DEFAULT_PASS: rabbitmq_password
      RABBITMQ_DEFAULT_VHOST: skypark
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - skypark_network

  # Go API Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development
    container_name: skypark_api
    environment:
      - APP_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=skypark_db
      - DB_USER=skypark_user
      - DB_PASSWORD=skypark_password
      - DB_SSL_MODE=disable
      - DB_TIMEZONE=Asia/Bishkek
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - RABBITMQ_URL=amqp://skypark_user:rabbitmq_password@rabbitmq:5672/skypark
      - JWT_SECRET=development_jwt_secret_key_change_in_production
      - API_PORT=8080
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    ports:
      - "8080:8080"
    volumes:
      - ./apps/api:/app
      - api_modules:/app/vendor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - skypark_network
    restart: unless-stopped

  # Next.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: skypark_web
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080/ws
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - skypark_network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: skypark_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    networks:
      - skypark_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: skypark_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - skypark_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: skypark_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - skypark_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  api_modules:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  skypark_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
 